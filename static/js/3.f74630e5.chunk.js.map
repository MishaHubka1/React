{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/Profileinfo/Profileinfo.module.css","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/Profileinfo/ProfileStatus.jsx","Components/Profile/Profileinfo/ProfileStatusWithHooks.jsx","Components/Profile/Profileinfo/ProfileInfo.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","massage","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","map","p","postsBlock","values","addPost","newPostText","Component","ProfileStatusWhithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","descripshionBlock","photos","large","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.f74630e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2MOWt\",\"posts\":\"MyPosts_posts__lfLit\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__iD_Of\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descripshionBlock\":\"Profileinfo_descripshionBlock__6Klg4\"};","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n          \r\n     <div className={s.item}> \r\n         <img src='https://media-cdn.tripadvisor.com/media/photo-s/10/a6/23/4b/as-imagens-por-foto-ja.jpg'/>\r\n       { props.massage }\r\n       <div>\r\n        <span>Like</span> {props.likesCount}\r\n        </div>\r\n    </div>\r\n       \r\n  )\r\n}\r\n\r\nexport default Post;","import React, {PureComponent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"} validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm ({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props =>  { \r\n    let postsElements = props.posts.map(p => <Post massage={p.massage} likesCount={p.likesCount}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost (values.newPostText);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My MyPosts</h3>\r\n           <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nexport default MyPosts;","import React from 'react'\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState ({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState ({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n        this.setState({\r\n            status: this.props.status\r\n        });\r\n    }\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                { !this.state.editMode &&\r\n            <div>\r\n                <span onDoubleClick={ this.activateEditMode}>{this.props.status || \"----\"}</span>\r\n            </div> \r\n            }\r\n            { this.state.editMode &&\r\n            <div>\r\n                <input onChange={this.onStatusChange} autoFocus={true} onBlur={ this.deactivateEditMode} value={this.state.status}></input>\r\n            </div> \r\n            }\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n   \r\nexport default ProfileStatus;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst ProfileStatusWhithHooks = (props) => {\r\n\r\n       let [editMode, setEditMode] = useState(false);\r\n       let [status, setStatus] = useState(props.status);\r\n\r\n       useEffect(() => {\r\n        setStatus(props.status)\r\n       }, [props.status] );\r\n\r\n       const activateEditMode = () => {\r\n        setEditMode(true);\r\n       }\r\n       \r\n       const deactivateEditMode = () => {\r\n            setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n      <div>\r\n                { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={ activateEditMode } >{props.status || \"----\"}</span>\r\n            </div> \r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={ deactivateEditMode} onChange={onStatusChange} value={status} />\r\n            </div> \r\n            }\r\n       </div>\r\n        )\r\n    }    \r\n\r\n   \r\nexport default ProfileStatusWhithHooks;\r\n","import s from './Profileinfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWhithHooks from './ProfileStatusWithHooks';\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n    if (!profile ) {\r\n        return <preloader />\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descripshionBlock}>\r\n       <img src = {profile.photos.large} />\r\n        <ProfileStatusWhithHooks status={status} updateStatus={updateStatus} />\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport {addPostActionCreator,} from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts) ;\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./Profileinfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n      <MyPostsContainer />\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfile, getStatus, updateStatus } from \"../../redux/profile-reduser\";\r\nimport Profile from \"./Profile\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n \r\n    componentDidMount() {\r\n      let userId = this.props.match.params.userId;\r\n      if (!userId) {\r\n        userId = this.props.authorizedUserId;\r\n        if (!userId) {\r\n          this.props.history.push(\"/login\");\r\n        }\r\n       }\r\n       this.props.getUserProfile(userId);\r\n       this.props.getStatus(userId);\r\n    }\r\n\r\n    render () {\r\n    return (\r\n    <div>\r\n      <Profile {...this.props} \r\n      profile={this.props.profile} \r\n      status = {this.props.status} \r\n      updateStatus = {this.props.updateStatus} />\r\n    </div>\r\n  )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose (\r\n  connect (mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n  withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n"],"sourceRoot":""}